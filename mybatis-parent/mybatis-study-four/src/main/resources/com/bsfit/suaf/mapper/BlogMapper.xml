<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--mybatis核心配置文件，名字随便起-->
<mapper namespace="com.bsfit.suaf.mapper.BlogMapper">
    <!--默认是一级缓存，并且关不掉的，现在使用下边标签就是开启二级缓存了，一级缓存关闭后才能放到二级缓存，但是能够定义一些功能，用缓存的pojo需要序列化-->
    <!--FIFO先进先出，50000毫秒刷新一次，最长512，只读，先在setting中配置开启，在这里具体配置-->
    <!--以及缓存只在一次sqlsession中，从开始到close，中间的增删改都会刷新缓存，同样使用clearcache能清空缓存-->
    <cache
            eviction="FIFO"
            flushInterval="50000"
            size="512"
            readOnly="true"
    />
    <!--动态SQL之if，if标签 test必写,这里写where1=1是为了不满足条件时输出所有，且不用在if里边加where-->
    <select id="getBlogIfId" parameterType="map" resultType="Blog">
        select * from blog where 1=1
        <if test="title != null">
            and title = #{title}
        </if>
        <if test="author != null">
            and author = #{author}
        </if>
    </select>

    <!--where标签把第一个满足条件的加上where，去掉and-->
    <select id="getBlogIfId1" parameterType="map" resultType="Blog">
        select * from blog
        <where>
            <if test="title != null">
                and title = #{title}
            </if>
            <if test="author != null">
                and author = #{author}
            </if>
        </where>
        <!--定制化where标签前后去掉什么-->
<!--        <trim prefix="" prefixOverrides="" suffix="" suffixOverrides="">-->
<!--            -->
<!--        </trim>-->

    </select>
    <!--动态SQL之choose，choose标签 像Java的switch-->
    <select id="getBlogChoose" parameterType="map" resultType="Blog">
        select * from blog
        <where>
            <choose>
                <when test="title != null">
                    and title = #{title}
                </when>
                <when test="author != null">
                    and author = #{author}
                </when>
                <otherwise>
                    and views = #{views}
                </otherwise>
            </choose>
        </where>
    </select>
    <!--动态SQL之choose，set 用于update，会自动去，-->
    <update id="getBlogSet" parameterType="map" >
        update blog
        <set>
            <if test="title != null">
                title = #{title},
            </if>
            <if test="author != null">
                author = #{author},
            </if>
        </set>
        where id = #{id}
    </update>
    <!--fore  用于in-->
    <select id="getBlogFore" parameterType="map" resultType="Blog">
        select * from blog
        <where>
            id in
            -- 迭代出来的是id   传入的是map,里边有个ids 以，分割，开头结尾是()
            <foreach item="id" index="index" collection="ids" open="(" close=")" separator=",">
                #{id}
            </foreach>
        </where>
    </select>

</mapper>
